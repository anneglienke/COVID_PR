!pip install requests

import requests as req
import pandas as pd 
from datetime import datetime, timedelta, timezone
import sqlalchemy
import sqlite3

DATABASE_LOCATION = "sqlite:///COVID_PR.sqlite"

# Extract CSV

if __name__ == "__main__":

 # Date
  today = datetime.today()
  yesterday = today - timedelta(days=3,hours=3)
  year = yesterday.year
  month = yesterday.month
  day = yesterday.day
  yyyymm = str(year)+"-"+str(month)
  ddmm = str(day)+"_"+str(month)

  date = yesterday.strftime("%x")

  # Path
  path = f'https://www.saude.pr.gov.br/sites/default/arquivos_restritos/files/documento/{yyyymm}/informe_epidemiologico_{ddmm}_obitos_casos_municipio.csv'
  
  df = pd.read_csv(path,sep=';')

  # Index
  df["Date"] = date
  df.set_index("Date", inplace=True)

  data_PR = pd.DataFrame(df, columns=["IBGE","RS","MACRO","Municipios","Casos","Obitos","Recuperados","Em_investigacao"])
 
  #print(data_PR)

# Define validation function

def check_if_valid_data(df: pd.DataFrame) -> bool:
    # Check if df is empty
    if data_PR.empty:
        print("No data downloaded")
        return False

    # Check for duplicates
    if pd.Series(data_PR["Municipios"],data_PR.index).is_unique:
        pass
    else:
        raise Exception("Duplicated primary key")

    # Check for nulls
    if data_PR.isnull().values.any():
        raise Exception("Null value found")

# Validate

if check_if_valid_data(data_PR):
    print("Valid data")

# Load
engine = sqlalchemy.create_engine(DATABASE_LOCATION)
conn = sqlite3.connect('COVID_PR.db')
cursor = conn.cursor()

# Define tables - Insert date index

sql_query = """
CREATE TABLE IF NOT EXISTS COVID_PR( 
    IBGE VARCHAR(15), 
    RS VARCHAR(10), 
    MACRO VARCHAR(10), 
    Municipios VARCHAR(100), 
    Casos INT, 
    Obitos INT, 
    Recuperados INT, 
    Em_investigacao INT,
    CONSTRAINT primary_key_constraint PRIMARY KEY (Municipios)
)
"""

cursor.execute(sql_query)
print("Open database successfully")

# Insert data from dataframe to sql database
try: 
    data_PR.to_sql("COVID_PR", engine, index=False, if_exists='append')
except:
    print("Data already exists in the database")

conn.close()
print("Close database successfully")
